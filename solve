#!/bin/python3
import os
import subprocess
from pathlib import Path
tmp_path = ".tmp"
backup_path = ".tmp/backup"
align = int(209715200)
import json

def reads(filename):
    """Read an array from a JSON file."""
    with open(filename, 'r') as file:
        return json.load(file)

def writes(filename, array):
    """Write an array to a JSON file."""
    with open(filename, 'w') as file:
        json.dump(array, file, indent=4)
def system(command):
    subprocess.run(command,shell=True)

def get_folder_size(folder_path):
    total_size = 0
    for file_path in Path(folder_path).rglob('*'):
        try:
            if file_path.is_file():
                total_size += file_path.stat().st_size
        except PermissionError:
            print(f"Permission denied: {file_path}")
            continue
    return total_size
# def get_folder_size(folder_path):
#     total_size = 0
#     for file_path in Path(folder_path).rglob('*'):
#         if file_path.is_file():
#             total_size += file_path.stat().st_size
#     return total_size
# def find_folder(target_dir, folder_name):
#     for root, dirs, files in os.walk(target_dir):
#         if folder_name in dirs:
#             return os.path.join(root, folder_name)
#     return None

def find_folder(start_path,folder_name):
    command = ['sudo', 'find', start_path, '-type', 'd', '-name', folder_name]
    
    try:
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        if result.stdout:
            return result.stdout.strip()
        else:
            return None
    except subprocess.CalledProcessError as e:
        print(f"Command failed with error: {e.stderr}")
        return None
def setupcontent(ls):
    for item in ls:
        if os.path.exists(os.path.join(tmp_path,item)):
            print(f"item: {item} exist, continue...")
            continue
        payload = f""
        print(f"mount and copy data of {item}...")
        payload += f"mkdir -p .tmp/{item};"
        payload += f"sudo mount out/{item} out/cac;"
        payload += f"sudo cp -Raf -p out/cac/* .tmp/{item};"
        payload += f"sudo umount out/cac"
        system(payload)
def deactivate(ls,lists):
    for item in ls:
        system(f"sudo mkdir -p .tmp/{item}/rub")
        for i in lists:
            if os.path.exists(os.path.join(tmp_path,item,"rub",i)):
                print(f"item: {i} throwed, continue...")
                continue
            found = find_folder(f".tmp/{item}",i)
            if found==None:
                print(f"{i} not found,continue... ")
                continue
            print(f"throwed {i}... ")
            system(f"sudo mv {found} .tmp/{item}/rub")
def remove(lists):
    for i in lists:
        found = find_folder(tmp_path,i)
        if found == None:
            print(f"item: {i} not found, continue...")
            continue
        system(f"sudo rm -r {found}")
        print(f"removed {found} !")
def backup(ls):
    for item in ls:
        if os.path.exists(os.path.join(backup_path,item)):
            continue
        system(f"mv out/{item} {backup_path}")
def setupimage(ls):
    array = []
    if os.path.exists("./exist"):
        array = reads("exist")
    if not os.path.exists(os.path.join(backup_path)):
        system(f"mkdir {backup_path}")
    for item in ls:
        if item in array:
            print("item don't need to do again, continue...")
            continue
        elif not os.path.exists(os.path.join(tmp_path,item)):
            print("content folder for {item} not found, continue")
            continue
        # size =get_folder_size(os.path.join(tmp_path,item)) 
        # size2 = size + 1024*1024
        print(f"\033[33mperforming {item}...")
        # print(f"size of .tmp/{item} {size}\033[0m")

        system(f"mv out/{item} {backup_path};")
        system(f"fallocate -l 3G out/data.img")
        system("mkfs.ext4  out/data.img")
        system(f"e2fsck -f out/data.img")
        system(f"resize2fs out/data.img 3G")
        # system(f"mkfs.erofs -d 4K -x 0 -z lz4 out/{item} .tmp/{item}")
        # system("sudo mount out/data.img out/cac")
        system("sudo mount -t ext4 -o loop,rw out/data.img out/cac")
        system(f"sudo cp -Raf -p .tmp/{item}/* out/cac")
        # input()
        # # system("sudo dd if=/dev/zero of=out/cac/zero.fill bs=1M || sudo rm out/cac/zero.fill")
        # # system(f"sudo fstrim out/cac")
        system("sudo umount out/cac")
        system(f"e2fsck -yf out/data.img")
        system(f"resize2fs -M out/data.img")
        system(f"e2fsck -yf out/data.img")
        system(f"mv out/data.img out/{item}")

        array.append(item)
        writes("./exist",array)
def clear_data_app(ls):
    for item in ls:
        found = find_folder(f".tmp/{item}","data-app")
        if found == None:
            print(f"data-app not in {item},continue...")
            continue
        system(f"sudo rm -r {found}/*")
        print("cleared !!")
def reset(ls):
    for item in ls:
        print(f"restore {item}...")
        system(f"rm -r out/{item}")
        system(f"mv {backup_path}/{item} out/")
if not os.path.exists("out/cac"):
    system("mkdir -p out/cac")   
if not os.path.exists(".tmp"):
    system("mkdir .tmp")
ls = [
        # "system_a.img",
        # "vendor_a.img",
        "product_a.img",
        "mi_ext_a.img"
        ]
lists = [
        "Gmail2",
        "Stk",
        "Velvet",
        "Maps",
        "Meet",
        "Videos",
        "YouTube",
        "YTMusic",
        "Calendar",
        "Chrome64",
        "Drive",
        "Photos",
        "talkback",
        "AndroidAutoStub",
        "Wellbeing",
        ]
setupcontent(ls)
# reset(ls)
# remove(lists)
# clear_data_app(ls)
# for item in ls:
#     system(f"file out/{item}")
# setupimage(ls)
